//module lua chon va xuat ket qua
module Brain(S, A, B, Cin, Fout);
	input [31:0] A, B;//ngo vao 32 bit
	input S;// S=0: phep cong
			 // S=1: phep tru
	input Cin; //co nho ngo vao
	output [23:0] Fout;//so float ngo ra
	output Cout;
	wire [22:0] Fr_A, Fr_B;//la 23 bit phan fraction cua A, B 
	wire [7:0] Exp_A, Exp_B;//8 bit mu 
	wire Sign_A, Sign_B;//la phan dau cua A,B
	
	
	wire [23:0] Full_A, Full_B; //la so day du phan nguyen va phan thap phan 1.xxxx, co tong la 24 bit 
								 
	
	//phan tach cac thanh phan cua ngo vao cho thuan tien tinh toan 
	assign Sign_A=A[31];
	assign Sign_B=B[31];
	assign Exp_A=A[30:23];
	assign Exp_B=B[30:23];
	assign Fr_A=A[22:0];
	assign Fr_B=B[22:0];
	
	assign Full_A[23]= 2'b01; //them bit 1 da chuan hoa 
	assign Full_B[23]= 2'b01; //them bit 1 da chuan hoa 
	assign Full_A[22:0]= A[22:0]; //gan  23 bit thap phan 
	assign Full_B[22:0]= B[22:0]; //gan 23 bit thap phan 
	
	
	//thuc hien so sanh phan Exp cua hai so A,B
	wire [23:0] Exp_A_wide, Exp_B_wide;//mo rong Exp moi so la 4 bit 
	assign Exp_A_wide[23:8]=24'b0; // mo rong 16 bit 
	assign Exp_A_wide[7:0]=Exp_A;//co dang Exp_A_wide= 0000Exp_A
	assign Exp_B_wide[23:8]=24'b0; // mo rong 16 bit 
	assign Exp_B_wide[7:0]=Exp_B;//co dang Exp_A_wide= 0000Exp_A
	
	wire [23:0] Exp_A_wide_bu2, Exp_B_wide_bu2, Exp_delta_A, Exp_delta_B;
	
	bu2_28bit  bu1(.X(Exp_A_wide), .Bu_2(Exp_A_wide_bu2)); //lay bu 2 cua Exp_A_wide
	bu2_28bit  bu2(.X(Exp_B_wide), .Bu_2(Exp_B_wide_bu2)); //lay bu 2 cua Exp_B_wide
	
	
	
	//thuc hien phep tru so mu de biet sai so la bao nhieu, va de xet coi am hay duong thi chi xet bit MSB
	CLA28bits  CLA1(.A(Exp_A_wide), .B(Exp_B_wide_bu2), .Ci(1'b0), .F(Exp_delta_A));// truong hop A>B
	CLA28bits  CLA2(.A(Exp_B_wide), .B(Exp_A_wide_bu2),.Ci(1'b0), .F(Exp_delta_B));//truong hop A<B
	
	
	//lay bit MSB cua Exp_delta_A de kiem tra la am hay duong 
	wire compare;
	assign compare=Exp_delta_A[23];		 
//--------------------------------------------------------------------------
add_sub_floating u1(.A(A), .B(B), .Cin(Cin), .Cout(Cout), .Fout1(Fout1), .Fout2(Fout2), .Fout3(Fout3), .Fout4(Fout4), .Fout5(Fout5), .Fout6(Fout6), .Fout7(Fout7), .Fout8(Fout8));












